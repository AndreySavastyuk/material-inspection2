import axios from 'axios'
import { useAuthStore } from '@/stores/authStore'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000/api/v1',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use(
  (config) => {
    const authStore = useAuthStore()
    const token = authStore.token

    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (import.meta.env.DEV) {
      console.log(`üöÄ ${config.method?.toUpperCase()} ${config.url}`, config.data)
    }

    return config
  },
  (error) => {
    console.error('Request error:', error)
    return Promise.reject(error)
  }
)

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (import.meta.env.DEV) {
      console.log(`‚úÖ Response from ${response.config.url}:`, response.data)
    }
    return response
  },
  async (error) => {
    const authStore = useAuthStore()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.response) {
      switch (error.response.status) {
        case 401:
          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
          console.error('Unauthorized - redirecting to login')
          authStore.logout()
          window.location.href = '/login'
          break

        case 403:
          console.error('Forbidden - insufficient permissions')
          // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö
          break

        case 404:
          console.error('Resource not found')
          break

        case 422:
          console.error('Validation error:', error.response.data)
          break

        case 500:
          console.error('Server error')
          break

        default:
          console.error(`Error ${error.response.status}:`, error.response.data)
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      console.error('No response from server:', error.request)
    } else {
      // –ß—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error('Request setup error:', error.message)
    }

    return Promise.reject(error)
  }
)

export default api

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getErrorMessage = (error) => {
  if (error.response?.data?.detail) {
    // FastAPI —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–∫–∏
    if (typeof error.response.data.detail === 'string') {
      return error.response.data.detail
    }
    // –ï—Å–ª–∏ detail - –º–∞—Å—Å–∏–≤ (–æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    if (Array.isArray(error.response.data.detail)) {
      return error.response.data.detail
        .map(err => `${err.loc.join('.')}: ${err.msg}`)
        .join(', ')
    }
  }

  if (error.response?.data?.message) {
    return error.response.data.message
  }

  if (error.message) {
    return error.message
  }

  return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ query string –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
export const buildQueryString = (params) => {
  const query = new URLSearchParams()

  Object.entries(params).forEach(([key, value]) => {
    if (value !== null && value !== undefined && value !== '') {
      if (Array.isArray(value)) {
        value.forEach(v => query.append(key, v))
      } else {
        query.append(key, value)
      }
    }
  })

  return query.toString()
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
export const uploadFile = async (url, file, additionalData = {}) => {
  const formData = new FormData()
  formData.append('file', file)

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  Object.entries(additionalData).forEach(([key, value]) => {
    formData.append(key, value)
  })

  return api.post(url, formData, {
    headers: {
      'Content-Type': 'multipart/form-data'
    }
  })
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 */
export const downloadFile = async (url, filename) => {
  const response = await api.get(url, {
    responseType: 'blob'
  })

  // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const downloadUrl = window.URL.createObjectURL(new Blob([response.data]))
  const link = document.createElement('a')
  link.href = downloadUrl
  link.setAttribute('download', filename)
  document.body.appendChild(link)
  link.click()
  link.remove()

  // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
  window.URL.revokeObjectURL(downloadUrl)

  return response
}